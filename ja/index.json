[{"content":" \u0026ldquo;Love is sharing a password.\u0026rdquo; — Netflix, on Twitter - 2017-03-10\nDisclaimer: This article is for educational purposes only; bypassing Netflix restrictions is against their terms of services (now we\u0026rsquo;re done with the legal). In 2023, Netflix started to crack down on password sharing. One way they did this was by introducing the concept of Netflix Households. Now, while I get that running a massive streaming platform like Netflix isn’t cheap, I completely disagree with how they\u0026rsquo;ve chosen to enforce this.\nFamilies today don’t always live in the same household. Kids move away for college. Parents may live in different cities. Partners travel. That’s exactly the situation I found myself in, and here is how I fixed it.\nNetflix Household # Netflix defines a household using different techniques / checks:\nDevice Fingerprinting : To identify a device even when its IP changes, as it could be connected to a different network. IP + IPQS (IPQualityScore) : Checking if you\u0026rsquo;re actually connected to the household network, not from an IP range that could be within a proxy/VPN/Datacenter and that your IP is not flagged as malicious/location spoofing by IPQS. Location + Activity tracking : To check that device location is (approximately) the same as the household IP location or if your location is changing very fast across the globe. Device fingerprinting is not really something that needs to be focused on, but correctly spoofing a location in a way that is \u0026ldquo;nearly\u0026rdquo; undetectable needs a bit more than just a VPN setup.\nNetwork Architecture # My home network stack is entirely deployed and orchestrated in a K3S (Light Kubernetes) cluster on a Raspberry PI:\nPiHole with a Cloudflared sidecar: For DHCP, DNS Sink (Domain blacklist / Ad-blocker), DoH (DNS-over-HTTPs). Wireguard: VPN server configured in a split-tunnelling mode, to use PiHole DNS Sink from mobile devices + access my home NAS. If you\u0026rsquo;re also using Kubernetes, and willing to deploy the same stack, you can find my helm charts here (explanations on adding the helm repo are in the Readme).\nThe Solution # The first thing to do to spoof a location is to use a VPN. The VPN server needs to be hosted in a home-network, that is defined as the Netflix Household IP. From here, most other posts suggest to:\n\u0026ldquo;Just tunnel all client traffic through your VPN\u0026rdquo;: it works, but it\u0026rsquo;s not something I like to do, I prefer split-tunneling (only tunnel necessary traffic through the VPN) \u0026ldquo;Tunnel only Netflix IP ranges\u0026rdquo;: Not safe, it only works for a limited time until one of Netflix backends (which are hosted on AWS) change IP outside the Amazon range you\u0026rsquo;ve configured. And you have to do it for all devices / enroll devices on an MDM (Mobile Device Management). The solution I implemented is relying on DNS Spoofing with a Forward Proxy and has the following benefits :\nIt won\u0026rsquo;t be affected by target IP changes (Proxy resolves domains from home-network) You can keep split-tunneling Minimal maintenance and totally transparent for client devices Can work with any other website than Netflix, without changing VPN config, just by doing DNS Spoofing for these domains. What is DNS Spoofing # DNS Spoofing is a technique used by hackers and companies which consists of returning a different IP than the real domain one to a DNS request, to intercept/monitor traffic. For example, when requesting netflix.com IP address by doing a DNS request using a public DNS server (1.1.1.1 - CloudFlare), you\u0026rsquo;ll get Netflix real IPs and your client will use it for subsequent requests:\n$ dig netflix.com @1.1.1.1 +short 54.73.148.110 54.155.246.232 18.200.8.190 Now, when you have your own DNS server, you\u0026rsquo;re in control and can reply anything you want to this netflix.com request:\n$ dig netflix.com +short 192.168.1.108 That\u0026rsquo;s what I\u0026rsquo;m doing to route all netflix requests through a transparent Forward Proxy hosted on IP 192.168.1.108.\nWhat is a Forward Proxy # A Forward Proxy is a network component that accepts connections on a private network and forwards them to the public internet. Clients typically know they\u0026rsquo;re using a forward proxy (though in our DNS redirection setup, this can be transparent to them). Forward proxies commonly provide additional benefits like content caching, traffic filtering, and can help preserve client anonymity by masking their original IP addresses.\nIt\u0026rsquo;s the opposite of a Reverse Proxy which accepts connections originating from public internet and routes them to resources on a private network. With reverse proxies, external clients are usually unaware they\u0026rsquo;re connecting through a proxy, making them ideal for load balancing across multiple servers, providing SSL termination, or acting as an application firewall.\nHow Does It Work # This approach is made possible by leveraging SNI (Server Name Indication). When a client makes an HTTPS request, it initiates a TLS Handshake. The first packet (also known as Client Hello) is not encrypted and always contains an SNI. This SNI is crucial for a Transparent Forward Proxy (RAW TCP Passthrough) to determine where to forward the packets without decrypting them. Without SNI, the Forward Proxy would need to act as a TLS termination point, establishing its own TLS connection with both the client and server. This approach involves trusting certificates on client devices and won\u0026rsquo;t work with applications like Netflix that implement Certificate Pinning.\nThe plaintext nature of SNI presents privacy concerns, that\u0026rsquo;s why there is a new emerging standard called ECH (Encrypted Client Hello), which I\u0026rsquo;ll discuss later.\nHere is the full workflow involved when using the transparent Forward Proxy with DNS Spoofing (the VPN Server was ignored to keep clarity):\nThe device makes a DNS request to resolve a domain IP (i.e. netflix.com) PiHole DNS server replies with the Forward Proxy IP The device initiates the connection and sends a Client Hello packet to the Forward Proxy The Forward Proxy reads the Client Hello\u0026rsquo;s SNI and makes a new DNS request to resolve the domain real IP The real (non spoofed) DNS Server replies with real IP The Forward Proxy passes through raw TCP packets to target host Ports Allocation # Before going further, our Forward Proxy will need to bind HTTP/HTTPS ports (80, 443). If you\u0026rsquo;re deploying everything on the same host, you might encounter a situation where those ports are already in use by another service, especially in a Kubernetes environment with an Ingress Controller.\nYou can have multiple services/processes use the same port on a host, as long as they bind to different IP addresses. For this purpose, I added two dedicated IPs:\n$ ip addr add 192.168.1.108/24 dev eth0 $ ip -6 addr add fd12:caf3:babe::1/64 dev eth0 Note that IP addresses added this way won\u0026rsquo;t persist across reboots. To make them permanent, you\u0026rsquo;ll need to configure them in your network configuration system. Depending on your distribution, this might be in ifupdown, netplan, NetworkManager or systemd-networkd. On a Raspberry Pi, you would add these commands to /etc/rc.local.\n/etc/rc.local #!/bin/sh -e # # rc.local # # This script is executed at the end of each multiuser runlevel. # Make sure that the script will \u0026#34;exit 0\u0026#34; on success or any other # value on error. # # In order to enable or disable this script just change the execution # bits. # # By default this script does nothing. # Print the IP address _IP=$(hostname -I) || true if [ \u0026#34;$_IP\u0026#34; ]; then printf \u0026#34;My IP address is %s\\n\u0026#34; \u0026#34;$_IP\u0026#34; fi ip addr add 192.168.1.108/24 dev eth0 ip -6 addr add fd12:caf3:babe::1/64 dev eth0 exit 0 Forward Proxy Setup # There are a numerous proxy technologies available for this purpose. I prefer NGinX because I\u0026rsquo;m familiar with it but other solutions would also work.\nThe critical feature to look after is the ability to control headers sent by the proxy, because normally (thanks to RFC 7239 and RFC 7230) all proxies should add a Via or Forwarded header, which are often hardcoded. Having such headers would make the proxy easily spottable by Netflix and luckily, NGinX adheres to a minimalist header philosophy and therefore doesn\u0026rsquo;t add them by default.\nAs mentioned earlier, I deployed everything in a Kubernetes cluster, you can find the helm chart for this nginx-sni-proxy here. If you\u0026rsquo;re not using Kubernetes, you can run a docker NGinX container with the following configuration:\n/etc/nginx/nginx.conf worker_processes auto; events { worker_connections 1024; } stream { # Enable SNI extraction from TLS ClientHello ssl_preread on; resolver 1.1.1.1 ipv6=on valid=10s; log_format basic \u0026#39;[$time_local] $remote_addr -\u0026gt; $ssl_preread_server_name:$server_port \u0026#39; \u0026#39;proto=$protocol bytes_sent=$bytes_sent bytes_received=$bytes_received duration=${session_time}s\u0026#39;; server { listen 443; proxy_pass $ssl_preread_server_name:443; access_log /dev/stdout basic; } } http { resolver 1.1.1.1 ipv6=on valid=10s; log_format basic \u0026#39;[$time_local] $remote_addr -\u0026gt; $host:$server_port \u0026#39; \u0026#39;proto=$server_protocol bytes_sent=$bytes_sent bytes_received=$request_length duration=${request_time}s\u0026#39;; server { listen 80; access_log /dev/stdout basic; location / { proxy_pass http://$host; } } } This configuration runs a forward proxy for both http and https protocols. The stream block is what allows RAW TCP Passthrough, enabling SNI-based routing without TLS termination.\nConfiguring DNS Spoofing # Now that the forward proxy is deployed, Netflix domain entries need to be added to the DNS server, pointing to your Forward Proxy IPs (in my case 192.168.1.108 and fd12:caf3:babe::1).\nOf course, manually adding a record for every single domain and subdomain would be a tedious and unsafe task. For this purpose, wildcard domain entries (e.g. *.netflix.com, matching any subdomain of netflix) are perfect, but PiHole does not natively support it. This is understandable since wildcard domain records are primarily used for DNS Spoofing, which is generally something you want to prevent.\nFortunately, PiHole relies on dnsmasq which does handle \u0026ldquo;wildcard\u0026rdquo; domain entries:\n/etc/dnsmasq.d/1-additional.conf address=/netflix.net/192.168.1.108 address=/netflixstudios.com/192.168.1.108 address=/netflix.com/192.168.1.108 address=/fast.com/192.168.1.108 address=/netflix.ca/192.168.1.108 address=/netflix.com/192.168.1.108 address=/netflix.net/192.168.1.108 address=/netflixinvestor.com/192.168.1.108 address=/nflxext.com/192.168.1.108 address=/nflximg.com/192.168.1.108 address=/nflximg.net/192.168.1.108 address=/nflxsearch.net/192.168.1.108 address=/nflxso.net/192.168.1.108 address=/nflxvideo.net/192.168.1.108 address=/netflixdnstest*.net/192.168.1.108 address=/amazonaws.com/192.168.1.108 address=/netflix.net/fd12:caf3:babe::1 address=/netflixstudios.com/fd12:caf3:babe::1 address=/netflix.com/fd12:caf3:babe::1 address=/fast.com/fd12:caf3:babe::1 address=/netflix.ca/fd12:caf3:babe::1 address=/netflix.com/fd12:caf3:babe::1 address=/netflix.net/fd12:caf3:babe::1 address=/netflixinvestor.com/fd12:caf3:babe::1 address=/nflxext.com/fd12:caf3:babe::1 address=/nflximg.com/fd12:caf3:babe::1 address=/nflximg.net/fd12:caf3:babe::1 address=/nflxsearch.net/fd12:caf3:babe::1 address=/nflxso.net/fd12:caf3:babe::1 address=/nflxvideo.net/fd12:caf3:babe::1 address=/netflixdnstest*.net/fd12:caf3:babe::1 address=/amazonaws.com/fd12:caf3:babe::1 Or using the helm chart:\nvalues.yaml # ... additionalDnsmasq: # IPv4 - \u0026#34;address=/netflix.net/192.168.1.108\u0026#34; - \u0026#34;address=/netflixstudios.com/192.168.1.108\u0026#34; - \u0026#34;address=/netflix.com/192.168.1.108\u0026#34; - \u0026#34;address=/fast.com/192.168.1.108\u0026#34; - \u0026#34;address=/netflix.ca/192.168.1.108\u0026#34; - \u0026#34;address=/netflix.com/192.168.1.108\u0026#34; - \u0026#34;address=/netflix.net/192.168.1.108\u0026#34; - \u0026#34;address=/netflixinvestor.com/192.168.1.108\u0026#34; - \u0026#34;address=/nflxext.com/192.168.1.108\u0026#34; - \u0026#34;address=/nflximg.com/192.168.1.108\u0026#34; - \u0026#34;address=/nflximg.net/192.168.1.108\u0026#34; - \u0026#34;address=/nflxsearch.net/192.168.1.108\u0026#34; - \u0026#34;address=/nflxso.net/192.168.1.108\u0026#34; - \u0026#34;address=/nflxvideo.net/192.168.1.108\u0026#34; - \u0026#34;address=/netflixdnstest*.net/192.168.1.108\u0026#34; - \u0026#34;address=/amazonaws.com/192.168.1.108\u0026#34; # IPv6 - \u0026#34;address=/netflix.net/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/netflixstudios.com/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/netflix.com/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/fast.com/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/netflix.ca/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/netflix.com/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/netflix.net/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/netflixinvestor.com/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/nflxext.com/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/nflximg.com/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/nflximg.net/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/nflxsearch.net/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/nflxso.net/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/nflxvideo.net/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/netflixdnstest*.net/fd12:caf3:babe::1\u0026#34; - \u0026#34;address=/amazonaws.com/fd12:caf3:babe::1\u0026#34; # ... At this point, all local devices are already accessing Netflix through the Forward Proxy. Forward Proxy stdout logs:\n10.42.0.1 -\u0026gt; occ-0-XXXX-XXXX.1.nflxso.net:443 proto=TCP bytes_sent=24438 bytes_received=991 duration=2.510s 10.42.0.1 -\u0026gt; occ-0-XXXX-XXXX.1.nflxso.net:443 proto=TCP bytes_sent=1141422 bytes_received=1202 duration=3.895s 10.42.0.1 -\u0026gt; occ-0-XXXX-XXXX.1.nflxso.net:443 proto=TCP bytes_sent=572895 bytes_received=1635 duration=5.021s 10.42.0.1 -\u0026gt; occ-0-XXXX-XXXX.1.nflxso.net:443 proto=TCP bytes_sent=67514 bytes_received=991 duration=2.431s 10.42.0.1 -\u0026gt; occ-0-XXXX-XXXX.1.nflxso.net:443 proto=TCP bytes_sent=118640 bytes_received=991 duration=3.550s 10.42.0.1 -\u0026gt; ipv4-XXXX-XXXXXX-ix.1.oca.nflxvideo.net:443 proto=TCP bytes_sent=91456 bytes_received=1444 duration=0.982s 10.42.0.1 -\u0026gt; ipv4-XXXX-XXXXXX-X-isp.1.oca.nflxvideo.net:443 proto=TCP bytes_sent=342429 bytes_received=3108 duration=4.524s 10.42.0.1 -\u0026gt; ipv4-XXXX-XXXXXX-X.1.oca.nflxvideo.net:443 proto=TCP bytes_sent=112581 bytes_received=1834 duration=3.360s 10.42.0.1 -\u0026gt; ios.prod.ftl.netflix.com:443 proto=TCP bytes_sent=5996 bytes_received=2087 duration=0.702s 10.42.0.1 -\u0026gt; ipv4-XXXX-XXXXXX-X.1.oca.nflxvideo.net:443 proto=TCP bytes_sent=27082 bytes_received=1214 duration=2.977s Configuring Wireguard # For this setup to work from outside a local network, we need to configure WireGuard in a way that each VPN client will tunnel at least:\nDNS requests to PiHole Packets going to our Forward Proxy The following is a very basic split-tunneling configuration. Please customize it according to your specific network requirements (wireguard official documentation).\nIn case you want to set up a firewall configuration to prevent/allow routing from/to specific hosts, it\u0026rsquo;s also possible using PostUp scripts, you can find an example in the helm chart values.\nserver wg0.conf [Interface] Address = 10.6.0.1/24, fd10:6::1/64 PrivateKey = # Your Server Private Key ListenPort = 51820 Table = off DNS = 192.168.1.107 # PiHole DNS Server IP MTU = 1420 [Peer] PublicKey = # Your Peer public key AllowedIPs = 10.6.0.2/32, fd10:6::2/128 PersistentKeepAlive = 25 PresharedKey = # Your Peer PSK # ... client wg0.conf [Interface] Address = 10.6.0.2/32, fd10:6::2/128 PrivateKey = # Your Client Private Key DNS = 192.168.1.107 # PiHole DNS Server IP MTU = 1420 [Peer] PublicKey = # Your Server Public Key Endpoint = # Your DynDNS or home static IP :51820 AllowedIPs = 192.168.1.107/32, 192.168.1.108/32, fd12:caf3:babe::1/128 # Tunnel only PiHole + Forward Proxy traffic PersistentKeepAlive = 25 PresharedKey = # Your Peer PSK Note that the AllowedIPs setting in the client configuration is crucial - it determines which traffic will be routed through the VPN. Here we\u0026rsquo;re only tunneling traffic for the PiHole and Forward Proxy.\nA Note On TLSv1.3 And ECH # As said before, having a plaintext CH (Client Hello) is a serious threat to privacy, as anybody monitoring the network can know the domain names of websites you\u0026rsquo;re visiting by just monitoring the SNI (Server Name Indication).\nWhile ECH (Encrypted Client Hello) is still in draft status, it\u0026rsquo;s intended to become a standard. Some countries like Russia have already censored its usage, as monitoring encrypted SNIs would require direct traffic interception (a TLS Termination Point).\nNow, you might be thinking:\n\u0026ldquo;Okay, ECH is a good thing, but does that mean this technique to bypass Netflix won\u0026rsquo;t work anymore?\u0026rdquo;\nShort answer: Yes, but it\u0026rsquo;s still possible to achieve SNI-like forwarding without it.\nI\u0026rsquo;ll make a full article about it when I\u0026rsquo;m done coding it. Until then, take care and have fun watching Netflix from around the world.\n","date":"21 7月 2025","externalUrl":null,"permalink":"/posts/bypassing-netflix-home-restrictions/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;Love is sharing a password.\u0026rdquo; — \u003ca\n  href=\"https://x.com/netflix/status/840276073040371712\"\n    target=\"_blank\"\n  \u003eNetflix, on Twitter - 2017-03-10\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\n  \n\n\n\n\u003cdiv\n  \n    class=\"flex px-4 py-3 rounded-md bg-primary-100 dark:bg-primary-900\"\n  \n  \u003e\n  \u003cspan\n    \n      class=\"text-primary-400 ltr:pr-3 rtl:pl-3 flex items-center\"\n    \n    \u003e\n    \n\n  \u003cspan class=\"relative block icon\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z\"/\u003e\u003c/svg\u003e\n\n  \u003c/span\u003e\n\n\n  \u003c/span\u003e\n\n  \u003cspan\n    \n      class=\"dark:text-neutral-300\"\n    \n    \u003e\u003cstrong\u003eDisclaimer:\u003c/strong\u003e This article is for educational purposes only; bypassing Netflix restrictions is against their terms of services (now we\u0026rsquo;re done with the legal).\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn 2023, Netflix started to crack down on password sharing.\nOne way they did this was by introducing the concept of \u003cstrong\u003eNetflix Households\u003c/strong\u003e.\nNow, while I get that running a massive streaming platform like Netflix isn’t cheap, I completely disagree with how they\u0026rsquo;ve chosen to enforce this.\u003c/p\u003e","title":"Bypassing Netflix’s Home Restrictions","type":"posts"},{"content":"","date":"21 7月 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","externalUrl":null,"permalink":"/ja/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/ja/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/ja/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/ja/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/ja/","section":"アレックス・プレッソ","summary":"","title":"アレックス・プレッソ","type":"page"}]